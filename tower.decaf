// tower trouble problem

// Authors: Christy Kobert & Kyle Laker

// Arrays must be declared globally
// Just use 50 since it's larger than all test cases
int top_balls[50];

def int max_balls_placed(int npegs)
{
    bool keep_going;
    bool ball_was_dropped;
    int balls_dropped;
    int ball;
    int i;

    i = 0;
    balls_dropped = 0;
    keep_going = true;
    ball_was_dropped = false;

    // Initialize the values for the pegs we are using for the game -- we
    // don't care about anything past this.
    while (i < npegs)
    {
        top_balls[i] = 0;
        i = i + 1;
    }


    // Go until we no longer drop any balls
    while (keep_going)
    {
        // Update to the next ball
        ball = balls_dropped + 1;
        // Ensure we start at peg 0
        i = 0;
        // We have not dropped this ball (because we haven't check a peg)
        ball_was_dropped = false;

        // Check each peg until we drop a ball; then move to the next ball
        while (i < npegs && !ball_was_dropped)
        {
            // If there are no balls on a peg, we can always drop a ball
            if (top_balls[i] == 0)
            {
                top_balls[i] = ball;
                balls_dropped = balls_dropped + 1;
                ball_was_dropped = true;
            }
            else
            {
                // Check that the current ball + the ball on the top of this
                // peg are a perfect square -- if so, drop the ball.
                // Otherwise, we failed to drop a ball on this peg.
                if (is_square(ball + top_balls[i]))
                {
                    top_balls[i] = ball;
                    balls_dropped = balls_dropped + 1;
                    ball_was_dropped = true;
                }
                else
                {
                    ball_was_dropped = false;
                }
            }
            // Move on to the next peg
            i = i + 1;
        }

        // If we didn't drop a ball on any pegs, we lose the game.
        if (!ball_was_dropped) {
            break;
        }
    }

    return balls_dropped;
}

def bool is_square(int num)
{
    int a;

    a = 1;

    // Use a slightly more efficient iteration than going all the way to
    // num. There are probably better shortcuts, but this works well enough.
    while (a < ((num / 2) + 1))
    {
        if ((a * a) == num)
        {
            return true;
        }
        a = a + 1;
    }
    return false;
}

def void do_test(int npegs, int correct)
{
    int max;
    max = max_balls_placed(npegs);
    print_int(npegs); print_str(" ");
    print_int(max);
    if (max != correct) {
        print_str(" INCORRECT!");
    }
    print_str("\n");
    return;
}

def int main()
{
    do_test(1, 1);
    do_test(2, 3);
    do_test(4, 11);
    do_test(10, 59);
    do_test(25, 337);
    do_test(30, 479);
    return 0;
}

