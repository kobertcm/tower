// tower trouble problem

// Arrays must be declared globally
// Just use 50 since it's larger than all test cases
int top_balls[50];

def int max_balls_placed(int npegs)
{
    bool keep_going;
    bool ball_was_dropped;
    int balls_dropped;
    int ball;
    int i;

    i = 0;
    balls_dropped = 0;
    keep_going = true;
    ball_was_dropped = false;

    while (i < npegs)
    {
        top_balls[i] = 0;
        i = i + 1;
    }


    while (keep_going) // Go until we break
    {
        ball = balls_dropped + 1;
        i = 0;
        ball_was_dropped = false;
        while (i < npegs && !ball_was_dropped) //check each peg
        {
            if (top_balls[i] == 0)
            {
                top_balls[i] = ball;
                balls_dropped = balls_dropped + 1;
                ball_was_dropped = true;
            }
            else
            {
                if (is_square(ball + top_balls[i]))
                {
                    top_balls[i] = ball;
                    balls_dropped = balls_dropped + 1;
                    ball_was_dropped = true;
                }
                else
                {
                    ball_was_dropped = false;
                }
            }
            i = i + 1;
        }
        if (!ball_was_dropped) {
            break;
        }
    }

    return balls_dropped;
}

def bool is_square(int num)
{
    int a;

    a = 1;

    // Go from 1 to (num / 2) to check for roots
    while (a < (num / 2))
    {
        if ((a * a) == num)
        {
            return true;
        }
        a = a + 1;
    }
    return false;
}

def void do_test(int npegs, int correct)
{
    int max;
    max = max_balls_placed(npegs);
    print_int(npegs); print_str(" ");
    print_int(max);
    if (max != correct) {
        print_str(" INCORRECT!");
    }
    print_str("\n");
    return;
}

def int main()
{
    do_test(1, 1);
    do_test(2, 3);
    do_test(4, 11);
    do_test(10, 59);
    do_test(25, 337);
    do_test(30, 479);
    return 0;
}

